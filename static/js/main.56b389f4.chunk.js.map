{"version":3,"sources":["Components/Nav/Nav.js","Components/Character/Character.js","Components/CharacterDetails/characterDetails.js","queries/queries.js","Components/ActionButton/ActionButton.js","Components/All/All.js","Components/SearchPeople/SearchPeople.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","Character","props","name","character","onClick","onDetails","CharacterDetails","details","onBack","height","mass","gender","homeworld","allPeople","gql","searchPeople","actionButton","refetch","action","description","navUrl","All","useState","setDetails","useQuery","variables","loading","error","data","results","nav","map","index","previous","next","SearchPeople","searchInput","setSearchInput","useLazyQuery","searchCharacters","type","onChange","event","target","value","placeholder","search","length","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.56b389f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navStyles.css';\r\nimport {Link} from 'react-router-dom';\r\n/*simply a nav bar between home page and search page\r\n* notice the use of link ( from React Router) from the browser user that overrides basic web browser actions for <a> tags*/\r\nfunction Nav() {\r\n    return (\r\n        <div className=\"nav-container\">\r\n            <div className=\"nav-header\">\r\n                <h1>Starwars Characters</h1>\r\n            </div>\r\n            <div className=\"nav-tags\">\r\n                <Link to=\"/\" className=\"nav-tag\">\r\n                    <p>\r\n                        All Characters\r\n                    </p>\r\n                </Link>\r\n                <Link to=\"/SearchPeople\" className=\"nav-tag\">\r\n                    <p>\r\n                        SearchPeople\r\n                    </p>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './characterStyles.css';\r\n/*simply rendering all characters from data received by apollo-graphql API*/\r\nfunction Character(props) {\r\n    const {name} = props.character\r\n\r\n    return (\r\n        <div className=\"character-container\" onClick={() => props.onDetails(props.character)}>\r\n            <p>{name}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Character;\r\n","import React, {Fragment} from 'react';\r\nimport './characterDetailsStyles.css';\r\n/*this component renders if a user needs more information on a character*/\r\nfunction CharacterDetails({details, onBack}) {\r\n    const {name, height, mass, gender, homeworld} = details;\r\n    return (\r\n        <Fragment>\r\n            <div className=\"character-detail-container\">\r\n                <div className='character-detail'>\r\n                    <p>Name:</p>\r\n                    <p>Height:</p>\r\n                    <p>Mass:</p>\r\n                    <p>Gender:</p>\r\n                    <p>Home World:</p>\r\n                </div>\r\n                <div className='character-detail text-center'>\r\n                    <p>{name}</p>\r\n                    <p>{height}</p>\r\n                    <p>{mass}</p>\r\n                    <p>{gender}</p>\r\n                    <p>{homeworld.name}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n                <button onClick={onBack} className=\"all-pagination-button\">Back</button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default CharacterDetails;","import {gql} from \"@apollo/client\";\r\n/*here are the setup queries to the apollo api*/\r\nexport const allPeople = gql`\r\n  query ($navUrl: String) {\r\n    nav(url: $navUrl) {\r\n            next\r\n            previous\r\n            results {\r\n              name\r\n              height\r\n              mass\r\n              gender\r\n              homeworld {\r\n                name\r\n              }\r\n            }\r\n        }\r\n  }\r\n`;\r\n\r\nexport const searchPeople = gql`\r\n    query($searchInput: String) {\r\n      search(input: $searchInput) {\r\n        next\r\n        previous\r\n        results {\r\n          name\r\n          height\r\n          mass\r\n          gender\r\n          homeworld {\r\n            name\r\n          }\r\n        }\r\n      }\r\n}\r\n`;","import React from \"react\";\r\n/*action button that refetches the next or previous page\r\n* https://www.apollographql.com/docs/react/data/queries/#refetching\r\n* */\r\nexport const actionButton = (refetch, action, description) => {\r\n    return(\r\n        <button className=\"all-pagination-button\"\r\n                onClick={() => refetch({navUrl: `${action}`})}>\r\n            {description}\r\n        </button>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './allStyles.css';\r\nimport {useQuery} from \"@apollo/client\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDetails from \"../CharacterDetails/characterDetails\";\r\nimport {allPeople} from '../../queries/queries'\r\nimport {actionButton} from \"../ActionButton/ActionButton\";\r\n\r\nfunction All() {\r\n    /*states using hooks*/\r\n    const [details, setDetails] = useState({});\r\n    /*setting up the pagination by starting with the first page\r\n    * https://www.apollographql.com/docs/react/data/queries/#refetching\r\n    * */\r\n    const { loading, error, data, refetch } = useQuery(allPeople, {\r\n        variables: {navUrl: 'https://swapi.dev/api/people/?page=1'}\r\n    });\r\n    /*event handler for when a user wants to see more */\r\n    const onDetails = (character) => {\r\n        setDetails(character);\r\n    }\r\n    /*event handler for going back to previous page*/\r\n    const onBack = () => {\r\n        setDetails({});\r\n    }\r\n    /*part of pagination*/\r\n    if (loading) { return <div className=\"all-loading-screen\">Loading...</div>; }\r\n    else if (error) { return <div>{error}</div>; }\r\n    else{\r\n        /*this only executes if user clicked on a name for more details */\r\n        if(details.name && details.homeworld){\r\n            return (\r\n                <CharacterDetails\r\n                    details={details}\r\n                    onBack={onBack}\r\n                />\r\n            )\r\n        }\r\n        else{\r\n            /*executes after getting data from api*/\r\n            let results = data.nav.results;\r\n            /*notice the previous and next for pagination calling\r\n             a actionButton that calls for a refetch accordingly*/\r\n            return (\r\n                <div className=\"all-container\">\r\n                    <h2>Click for more details</h2>\r\n                    <div className=\"all-character-container\">\r\n                        {results.map((character, index) => (\r\n                            <Character\r\n                                key={index}\r\n                                character={character}\r\n                                onDetails={onDetails}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"all-pagination-container\">\r\n                        {\r\n                            data.nav.previous === null ? null\r\n                                : actionButton(refetch ,data.nav.previous, 'Prev')\r\n                        }\r\n                        {\r\n                            data.nav.next === null ? null\r\n                                : actionButton(refetch ,data.nav.next, 'Next')\r\n                        }\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default All;","import React, {useState} from 'react';\r\nimport './searchStyles.css';\r\nimport {useLazyQuery} from \"@apollo/client\";\r\nimport {searchPeople} from \"../../queries/queries\";\r\nimport CharacterDetails from \"../CharacterDetails/characterDetails\";\r\nimport Character from \"../Character/Character\";\r\n\r\n/*\r\n* This component is very similar to the home/All component just seperated for simplicity and to reduce clustering of\r\n* too much code, there are 2 different changes here that differ form All component\r\n* 1. Query to apollo API is different\r\n* 2. instead of using useQuery form apollo/client package, now using useLazyQuery for more manual control\r\n* some of the css is also reused here.\r\n* */\r\n\r\nfunction SearchPeople() {\r\n    const [details, setDetails] = useState({});\r\n    const [searchInput, setSearchInput] = useState('');\r\n\r\n    const [searchCharacters, {loading, error, data}] = useLazyQuery(searchPeople, {\r\n        variables: {searchInput: ''}\r\n    });\r\n\r\n    const onDetails = (character) => {\r\n        setDetails(character);\r\n    }\r\n\r\n    const onBack = () => {\r\n        setDetails({});\r\n    }\r\n\r\n    const onInput = (event) => {\r\n        setSearchInput(event.target.value);\r\n    }\r\n\r\n    const onSearch = () => {\r\n        if(searchInput !== ''){\r\n            searchCharacters({\r\n                variables: {searchInput: searchInput}\r\n            });\r\n        }\r\n    }\r\n\r\n    if (loading) {\r\n        return <div className=\"all-loading-screen\">Loading...</div>;\r\n    } else if (error) {\r\n        return <div>{error}</div>;\r\n    } else {\r\n        if (details.name && details.homeworld) {\r\n            return (\r\n                <CharacterDetails\r\n                    details={details}\r\n                    onBack={onBack}\r\n                />\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"all-container\">\r\n                    <h2>Search for a character</h2>\r\n                    <div className=\"search-container\">\r\n                        <input\r\n                            type=\"text\" onChange={onInput}\r\n                            value={searchInput} placeholder=\"Anakin\"\r\n                            className=\"input-styles\"\r\n                        />\r\n                        <button className=\"all-pagination-button\"\r\n                                onClick={onSearch}\r\n                        >Search\r\n                        </button>\r\n                    </div>\r\n                    <h2>Click on characters for more</h2>\r\n                    {\r\n                        data && data.search.results.length > 0 ?\r\n                            <div className=\"all-character-container\">\r\n                                {\r\n                                    data.search.results.map((character, index) => (\r\n                                        <Character\r\n                                            key={index}\r\n                                            character={character}\r\n                                            onDetails={onDetails}\r\n                                        />\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            : <p className='text-center'>Nothing Found</p>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default SearchPeople;","import './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport Nav from \"./Components/Nav/Nav\";\nimport All from \"./Components/All/All\";\nimport SearchPeople from \"./Components/SearchPeople/SearchPeople\";\n/*using react router for easy navigation between Single page components*/\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Nav/>\n            <Route path=\"/\" exact={true}>\n                <All/>\n            </Route>\n            <Route path=\"/SearchPeople\" exact={true}>\n                <SearchPeople/>\n            </Route>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n*   ***************************NOTE******************************\n*\n* implementation of future features using Redux, not yet integrated due to complexity of queries with apollo\n* */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// Apollo setup for api queries\nimport {ApolloClient, InMemoryCache, ApolloProvider} from \"@apollo/client\";\n//Redux setup\n/*import {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport allReducers from \"./Redux/Reducers\";\nimport thunkMiddleware from 'redux-thunk'\n// Redux store setup with all reducers\nconst store = createStore(allReducers, applyMiddleware(thunkMiddleware));*/\n\n// Apollo setup\nconst client = new ApolloClient({\n    uri: 'https://star-wars-apollo-graphql-api.herokuapp.com/graphql',\n    cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n      <ApolloProvider client={client}>\n              <App/>\n      </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}